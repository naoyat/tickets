<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
  <title>Hello World</title>
  <style>
  div#field{
     border:1px solid black; float:left; margin:0.5em; padding:0.5em;
  }
  div#hand{
     width: 300px; height: 300px;
     border:1px solid black; margin:0.5em; padding:0.5em;
     float: left;
  }
  div#hand_title{
     border-bottom: 1px solid black;
  }
  div.ticket{
    width: 100px;
    border: 1px solid black;
    padding: 0.3em;
  }
  </style>
</head>
<body>

<div id="field">
  <div id="top">かならず</div>
  <div id="bottom">できれば</div>
  <div id="right">いますぐ</div>
  <div id="left">そのうち</div>
</div>

<div id="hand">
  <div id="hand_title"></div>
  <div id="hand_desc"></div>
</div>

<div id="bs-console"></div>

<script src="lib/biwascheme.js">
;; load
(for-each (lambda (pair)
            (js-load (string-append "js/" (car pair) ".js")
                     (cdr pair)))
          '(("scriptaculous" . "Scriptaculous")
            ("builder" . "Builder")
            ("effects" . "Effect")
            ("dragdrop" . "Draggable")
            ("controls" . "Autocompleter")
            ("slider" . "Control")
            ("sound" . "Sound")))

;; consts

(define (px n)
  (string-append (number->string n) "px"))

(define (set-position! elem x y)
  (set-style! elem "position" "absolute") 
  (set-style! elem "left" (px x))
  (set-style! elem "top" (px y)))

(define (get-position elem)
  (define (remove-px str)
    (string->number (car (regexp-exec (string->regexp "(\\\\d+)") str))))
  (values (remove-px (get-style elem "left"))
          (remove-px (get-style elem "top"))))

(define *width* 600)
(define *height* 600)

(set-style! ($ "field") "width" (px *width*))
(set-style! ($ "field") "height" (px *height*))
(set-position! ($ "top")    (/ *width* 2) 0)
(set-position! ($ "bottom") (/ *width* 2) *height*)
(set-position! ($ "right")  *width* (/ *height* 2))
(set-position! ($ "left")   0       (/ *height* 2))

(define show-error print)

(define (ticket-move id x y)
  (let1 result (http-post "tickets/move/"
                          `(("id" . ,id) ("x" . ,x) ("y" . ,y)))
    (when (not (string=? result "#t"))
      (show-error "error: failed to save ticket position"))))

(define (ticket-moved ticket-div)
  (call-with-values 
    (lambda () (get-position ticket-div))
    (lambda (x y) 
      (ticket-move (js-ref ticket-div "ticket-id") x y))))

(define (show-ticket ticket-div)
  (set-content! ($ "hand_title") (get-content ticket-div))
  (set-content! ($ "hand_desc")
                (string-append "(" 
                               (get-style ticket-div "left")
                               ","
                               (get-style ticket-div "top")
                               ")")))

(define (ticket-new! id name x y)
  (let1 ticket-div (element-new `("div.ticket" ,(symbol->string name)))
    (js-set! ticket-div "ticket-id" id)
    (add-handler! ticket-div "click"
                  (lambda (ev) (show-ticket (js-ref ev "target"))))
    (element-insert! ($ "field") ticket-div)
    (js-new "Draggable" ticket-div
            (js-obj "onEnd" 
                    (js-closure 
                      (lambda (drg) (ticket-moved (js-ref drg "element"))))))
    (set-position! ticket-div x y)
    ticket-div))

(for-each (lambda (vals) (apply ticket-new! vals))
          (read-from-string (http-request "tickets/list")))

(display "ok")
</script>

</body>
</html>
