#!/usr/bin/env ruby
require 'rubygems'
require 'ramaze'
require 'ramaze/setup'

# load config
conf_path = File.expand_path("~/.tickets.conf")
load conf_path if File.exist?(conf_path)

# update config
module Tickets
  module Config
    DB_PATH = File.expand_path("~/.tickets.db") unless defined?(DB_PATH)
    PORT = 7002 unless defined?(PORT)
  end
end

# connect database
$LOAD_PATH.unshift(File.expand_path("../", File.dirname(__FILE__)))
require 'model/ticket'

# controllers
class MainController < Ramaze::Controller
  def index
  end
end

class TicktesController < Ramaze::Controller
  map '/tickets'
  deny_layout :all

  def create
    ticket = Ticket.new
    ticket.save

    "(id . #{ticket.id})"
  end

  def list
    tickets = Ticket.filter(:deleted => false).all

    '(' +
    tickets.map{|ticket|
      "(#{ticket.id} #{ticket.title.inspect} #{ticket.emergency} #{ticket.importance})"
    }.join(' ') +
    ')'
  end

  def move
    raise "must be via POST" unless request.post?
    ticket = Ticket.find(:id => request["id"])
    raise "ticket not found" unless ticket

    ticket.update(:emergency => request["x"],
                  :importance => request["y"])
    "#t"
  end

  def rename
    raise "must be via POST" unless request.post?
    ticket = Ticket.find(:id => request["id"])
    raise "ticket not found" unless ticket

    ticket.update(:title => request["title"])
    "#t"
  end

  def delete
    raise "must be via POST" unless request.post?
    ticket = Ticket.find(:id => request["id"])
    raise "ticket not found" unless ticket

    ticket.update(:deleted => true)
    "#t"
  end
end

Ramaze.setup do
  option.port = Tickets::Config::PORT
end
Ramaze.start
